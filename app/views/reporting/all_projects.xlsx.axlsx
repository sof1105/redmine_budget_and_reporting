wb = xlsx_package.workbook
date = @upto

style_normal = wb.styles.add_style :sz => 10, :b => false, :alignment => {:horizontal => :left, :vertical => :center, :wrapText => true}
style_heading_top = wb.styles.add_style :sz => 12, :b => true, :border => {:style => :hair, :color => "000000", :edges => [:top]}
style_heading_left = wb.styles.add_style :sz => 12, :b => true, :border => {:style => :hair, :color => "000000", :edges => [:left, :top]}
style_heading_right = wb.styles.add_style :sz => 12, :b => true, :border => {:style => :hair, :color => "000000", :edges => [:right, :top]}
style_projectleader_left = wb.styles.add_style :sz => 10, :b => true, :border => {:style => :hair, :color => "000000", :edges => [:left]},
                                                :alignment => {:vertical => :top, :horizontal => :left}
style_projectleader_right = wb.styles.add_style :sz => 10, :b => false, :border => {:style => :hair, :color => "000000", :edges => [:right]}
style_tableheading = wb.styles.add_style :sz => 10, :b => true, :alignment => {:horizontal => :center, :vertial => :center},
                                         :border => {:style => :hair, :color => "000000", :edges => [:top, :left, :right, :bottom]}
style_table_normal = wb.styles.add_style :sz => 10, :b => false, :alignment => {:horizontal => :center, :vertial => :center},
                                        :border => {:style => :hair, :color => "000000", :edges => [:top, :left, :right, :bottom]}
style_table_left = wb.styles.add_style :sz => 10, :b => false, :alignment => {:horizontal => :left, :vertial => :center},
                                      :border => {:style => :hair, :color => "000000", :edges => [:top, :left, :right, :bottom]}
style_empty_left = wb.styles.add_style :sz => 10, :b => false, :border => {:style => :hair, :color => "000000", :edges => [:left]}
style_empty_right = wb.styles.add_style :sz => 10, :b => false, :border => {:style => :hair, :color => "000000", :edges => [:right]}
style_currency = wb.styles.add_style :sz => 10, :b => false, :alignment => {:horizontal => :center, :vertial => :center}, :num_fmt => 7, # 7 is format ###.###,## â‚¬
                                     :border => {:style => :hair, :color => "000000", :edges => [:top, :left, :right, :bottom]}
style_date = wb.styles.add_style :sz => 10, :b => false, :alignment => {:horizontal => :center, :vertial => :center}, 
	     			 :format_code => "dd.mm.yyyy",
                                 :border => {:style => :hair, :color => "000000", :edges => [:top, :left, :right, :bottom]}
style_date_delta = wb.styles.add_style :sz => 10, :b => false, :alignment => {:horizontal => :center, :vertial => :center},
                                 :border => {:style => :hair, :color => "000000", :edges => [:top, :left, :right, :bottom]}                 

wb.add_worksheet(:name => "Projektreporting", :page_setup =>{:paper_size => 9, :fit_to_height => 1, :fit_to_height => 1}) do |sheet|
  
  @projects.each do |project|
    
    # add empty row on top (dont want to start at the beginning of the sheet)
    sheet.add_row([nil], :height => 14)
    
    # set projectnumber to first part of identifier, if it starts with "ed"
    projectnumber = project.identifier.split("-").first
    if projectnumber && projectnumber[0,2] == "ed"
      projectnumber = projectnumber.upcase
    else
      projectnumber = ""
    end
    sheet.add_row(["Projekt-Nr.:", projectnumber, project.name, nil, nil, nil], :height => 14, #added extra nil cell to prevent overflow in next cell
            :style => [style_heading_left, style_heading_top, style_heading_top, style_heading_top, style_heading_right])
    
    
    # add projectleaders
    projectleaders = project.users_by_role[@projectleader_role].try(:map) {|u| u.name}
    projectleaders = ["Projektleiter:"] << projectleaders.try(:join,", ") 
    projectleaders = projectleaders + [nil, nil, nil]
    row = sheet.add_row(projectleaders, :height => 14, :style => [style_projectleader_left, style_normal, nil, nil, style_projectleader_right])
    height = ((row.cells[1].autowidth || 1.0) / 72).ceil * 14
    row.cells[1].merge(row.cells[4])
    row.height = height
    
    # add Project comment
    project_customfield = ProjectCustomField.where(:name => "Bemerkung Projektreporting").first
    project_comment = project.custom_field_value(project_customfield.id)
    row = sheet.add_row(["Bemerkung:"] + [project_comment] + [nil, nil, nil], :height => 14,
        :style => [style_projectleader_left, style_normal, nil, nil, style_projectleader_right])
    height = ((row.cells[1].autowidth || 1.0) / 72).ceil * 14
    row.cells[1].merge(row.cells[4])
    row.height = height
    
    # add empty row
    sheet.add_row([nil, nil, nil, nil, nil], :height => 14, :style => [style_empty_left, nil, nil, nil, style_empty_right])
    
    # add table heading
    sheet.add_row([nil, "geplant", "Prognose", "IST-Wert", "Delta (1 Mon.)"], :height => 14, :style => style_tableheading)
    
    # add budget information
    planned_budget = project.PlannedBudget.until_date(date).latest.try(:budget)
    budget_forecast = project.ProjectbudgetForecast.until_date(date).latest.try(:budget)
    
    salary_customfield = UserCustomField.where(:name => "Stundenlohn").first
    actual_budget_issue = project.costs_issues(date)
    
    actual_budget_individual = project.costs_individual_items(date)
    actual_budget = actual_budget_issue + actual_budget_individual
    
    old_budget_issue = project.costs_issues(date.months_ago(1))
    old_budget_individual = project.costs_individual_items(date.months_ago(1))
    old_budget = old_budget_issue + old_budget_individual
    
    delta = actual_budget - old_budget
    
    sheet.add_row(["Budget", planned_budget, budget_forecast, actual_budget, delta], :height => 14,
                    :style =>[style_table_left, style_currency, style_currency, style_currency, style_currency])
    
    # add information for each version
    version_customfield = VersionCustomField.where(:name => "Abgeschlossen").first
    versions = project.versions
    versions.sort! {|a,b| a.name <=> b.name}
    versions.each do |v|
        name = v.name
        planned_date = v.effective_date || "" # empty string, but not nil, so that version name doesn't overlow into next cell
        forecast_date = v.VersiondateForecast.until_date(date).latest.try(:forecast_date)
	closed_date = v.custom_field_value(version_customfield.try(:id)).try(:to_date)
        delta = VersiondateForecast.delta(1, v.id).to_i
        sheet.add_row([name, planned_date, forecast_date, closed_date, delta], :height => 14,
                        :style => [style_table_left, style_date, style_date, style_date, style_date_delta])
    end
    
    sheet.add_row([nil], :height => 14)
  
  end
  
  sheet.column_widths 20, 20, 20, 20, 20
end
